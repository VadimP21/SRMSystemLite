openapi: 3.0.0
info:
  title: Product API
  summary: API that allows you to manage products for SRM
  version: 1.0.0

servers:
  - url: https://localhost:8000
    description: local development server
  - url: https://crm.worksystem.com
    description: main production server
  - url: https://crm.worksystem-staging.com
    description: staging server for testing purposes only

paths:
  /products:
    get:
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          required: false
          schema:
            type: integer
        - name: sort_field
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/SortField'
        - name: sort_order
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/SortOrder'
      summary: Returns a list of products
      operationId: getProducts
      responses:
        '200':
          description: A JSON array of products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
    post:
      summary: Create a product
      operationId: CreateProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductSchema'
      responses:
        '201':
          description: A JSON representation of the created product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProductSchema'
        '400':
          description: Bad Request - Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /products/{product_name}:
    parameters:
      - in: path
        name: product_name
        required: true
        schema:
          type: string
    get:
      summary: Returns the details of a specific product
      operationId: getProduct
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProductSchema'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
    put:
      summary: Replaces an existing product
      operationId: putProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductSchema'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProductSchema'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /products/{product_id}:
    parameters:
      - in: path
        name: product_id
        required: true
        schema:
          type: integer
    delete:
      summary: Deletes an existing product
      operationId: deleteProduct
      responses:
        '204':
          description: The resource was deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
components:
  responses:
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnprocessableEntity:
      description: The payload contains invalid values.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      type: object
      required:
        - detail
      properties:
        detail:
          oneOf:
            - type: string
            - type: array
    SortField:
      type: string
      enum:
        - name
        - price
        - created_at
    SortOrder:
      type: string
      enum:
        - asc
        - desc
    CreateProductSchema:
      type: object
      required:
        - name
        - price
      properties:
        name:
          type: string
        price:
          type: number
          format: decimal
    GetProductSchema:
      allOf:
        - $ref: '#/components/schemas/CreateProductSchema'
        - type: object
          properties:
            id:
              type: integer
              format: int64
            created_at:
              type: string
              format: date-time
    ProductResponse:
      type: object
      description: Response containing a list of products.
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/GetProductSchema'